
ledBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c80  08001c80  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08001c80  08001c80  00011c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c88  08001c88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c88  08001c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c8c  08001c8c  00011c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000074  08001d04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001d04  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005170  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001195  00000000  00000000  00025214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  000263b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a8  00000000  00000000  000267f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e1f  00000000  00000000  00026b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000542b  00000000  00000000  0003b9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f67  00000000  00000000  00040de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2d49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001158  00000000  00000000  000c2d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001c44 	.word	0x08001c44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08001c44 	.word	0x08001c44

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <newNode>:
};

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

struct node* newNode(char data){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
    struct node* node = (struct node*)malloc(sizeof(struct node));
 80004ea:	200c      	movs	r0, #12
 80004ec:	f001 faca 	bl	8001a84 <malloc>
 80004f0:	4603      	mov	r3, r0
 80004f2:	60fb      	str	r3, [r7, #12]
    node->data = data;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	79fa      	ldrb	r2, [r7, #7]
 80004f8:	701a      	strb	r2, [r3, #0]
    node->left = NULL;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
    node->right = NULL;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
    return (node);
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <createMorseTree>:

struct node* createMorseTree(){
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	struct node* root = newNode(0);
 8000516:	2000      	movs	r0, #0
 8000518:	f7ff ffe2 	bl	80004e0 <newNode>
 800051c:	6078      	str	r0, [r7, #4]
	root->left = newNode(69);
 800051e:	2045      	movs	r0, #69	; 0x45
 8000520:	f7ff ffde 	bl	80004e0 <newNode>
 8000524:	4602      	mov	r2, r0
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	605a      	str	r2, [r3, #4]
	root->left->left = newNode(73);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685c      	ldr	r4, [r3, #4]
 800052e:	2049      	movs	r0, #73	; 0x49
 8000530:	f7ff ffd6 	bl	80004e0 <newNode>
 8000534:	4603      	mov	r3, r0
 8000536:	6063      	str	r3, [r4, #4]
	root->left->right = newNode(65);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685c      	ldr	r4, [r3, #4]
 800053c:	2041      	movs	r0, #65	; 0x41
 800053e:	f7ff ffcf 	bl	80004e0 <newNode>
 8000542:	4603      	mov	r3, r0
 8000544:	60a3      	str	r3, [r4, #8]
	root->left->left->left = newNode(83);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	685c      	ldr	r4, [r3, #4]
 800054c:	2053      	movs	r0, #83	; 0x53
 800054e:	f7ff ffc7 	bl	80004e0 <newNode>
 8000552:	4603      	mov	r3, r0
 8000554:	6063      	str	r3, [r4, #4]
	root->left->left->right = newNode(85);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	685c      	ldr	r4, [r3, #4]
 800055c:	2055      	movs	r0, #85	; 0x55
 800055e:	f7ff ffbf 	bl	80004e0 <newNode>
 8000562:	4603      	mov	r3, r0
 8000564:	60a3      	str	r3, [r4, #8]
	root->left->right->left = newNode(82);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	689c      	ldr	r4, [r3, #8]
 800056c:	2052      	movs	r0, #82	; 0x52
 800056e:	f7ff ffb7 	bl	80004e0 <newNode>
 8000572:	4603      	mov	r3, r0
 8000574:	6063      	str	r3, [r4, #4]
	root->left->right->right = newNode(87);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	689c      	ldr	r4, [r3, #8]
 800057c:	2057      	movs	r0, #87	; 0x57
 800057e:	f7ff ffaf 	bl	80004e0 <newNode>
 8000582:	4603      	mov	r3, r0
 8000584:	60a3      	str	r3, [r4, #8]
	root->left->left->left->left = newNode(72);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	685c      	ldr	r4, [r3, #4]
 800058e:	2048      	movs	r0, #72	; 0x48
 8000590:	f7ff ffa6 	bl	80004e0 <newNode>
 8000594:	4603      	mov	r3, r0
 8000596:	6063      	str	r3, [r4, #4]
	root->left->left->left->right = newNode(86);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	685c      	ldr	r4, [r3, #4]
 80005a0:	2056      	movs	r0, #86	; 0x56
 80005a2:	f7ff ff9d 	bl	80004e0 <newNode>
 80005a6:	4603      	mov	r3, r0
 80005a8:	60a3      	str	r3, [r4, #8]
	root->left->left->right->left = newNode(70);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	689c      	ldr	r4, [r3, #8]
 80005b2:	2046      	movs	r0, #70	; 0x46
 80005b4:	f7ff ff94 	bl	80004e0 <newNode>
 80005b8:	4603      	mov	r3, r0
 80005ba:	6063      	str	r3, [r4, #4]
	root->left->right->left->left = newNode(76);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	685c      	ldr	r4, [r3, #4]
 80005c4:	204c      	movs	r0, #76	; 0x4c
 80005c6:	f7ff ff8b 	bl	80004e0 <newNode>
 80005ca:	4603      	mov	r3, r0
 80005cc:	6063      	str	r3, [r4, #4]
	root->left->right->right->left = newNode(80);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	689c      	ldr	r4, [r3, #8]
 80005d6:	2050      	movs	r0, #80	; 0x50
 80005d8:	f7ff ff82 	bl	80004e0 <newNode>
 80005dc:	4603      	mov	r3, r0
 80005de:	6063      	str	r3, [r4, #4]
	root->left->right->right->right = newNode(74);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	689c      	ldr	r4, [r3, #8]
 80005e8:	204a      	movs	r0, #74	; 0x4a
 80005ea:	f7ff ff79 	bl	80004e0 <newNode>
 80005ee:	4603      	mov	r3, r0
 80005f0:	60a3      	str	r3, [r4, #8]
	root->right = newNode(84);
 80005f2:	2054      	movs	r0, #84	; 0x54
 80005f4:	f7ff ff74 	bl	80004e0 <newNode>
 80005f8:	4602      	mov	r2, r0
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	609a      	str	r2, [r3, #8]
	root->right->right = newNode(77);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689c      	ldr	r4, [r3, #8]
 8000602:	204d      	movs	r0, #77	; 0x4d
 8000604:	f7ff ff6c 	bl	80004e0 <newNode>
 8000608:	4603      	mov	r3, r0
 800060a:	60a3      	str	r3, [r4, #8]
	root->right->left = newNode(78);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689c      	ldr	r4, [r3, #8]
 8000610:	204e      	movs	r0, #78	; 0x4e
 8000612:	f7ff ff65 	bl	80004e0 <newNode>
 8000616:	4603      	mov	r3, r0
 8000618:	6063      	str	r3, [r4, #4]
	root->right->right->right = newNode(79);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	689c      	ldr	r4, [r3, #8]
 8000620:	204f      	movs	r0, #79	; 0x4f
 8000622:	f7ff ff5d 	bl	80004e0 <newNode>
 8000626:	4603      	mov	r3, r0
 8000628:	60a3      	str	r3, [r4, #8]
	root->right->right->left = newNode(71);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	689c      	ldr	r4, [r3, #8]
 8000630:	2047      	movs	r0, #71	; 0x47
 8000632:	f7ff ff55 	bl	80004e0 <newNode>
 8000636:	4603      	mov	r3, r0
 8000638:	6063      	str	r3, [r4, #4]
	root->right->left->right = newNode(75);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	685c      	ldr	r4, [r3, #4]
 8000640:	204b      	movs	r0, #75	; 0x4b
 8000642:	f7ff ff4d 	bl	80004e0 <newNode>
 8000646:	4603      	mov	r3, r0
 8000648:	60a3      	str	r3, [r4, #8]
	root->right->left->left = newNode(68);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	685c      	ldr	r4, [r3, #4]
 8000650:	2044      	movs	r0, #68	; 0x44
 8000652:	f7ff ff45 	bl	80004e0 <newNode>
 8000656:	4603      	mov	r3, r0
 8000658:	6063      	str	r3, [r4, #4]
	root->right->right->left->right = newNode(81);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	685c      	ldr	r4, [r3, #4]
 8000662:	2051      	movs	r0, #81	; 0x51
 8000664:	f7ff ff3c 	bl	80004e0 <newNode>
 8000668:	4603      	mov	r3, r0
 800066a:	60a3      	str	r3, [r4, #8]
	root->right->right->left->left = newNode(90);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	685c      	ldr	r4, [r3, #4]
 8000674:	205a      	movs	r0, #90	; 0x5a
 8000676:	f7ff ff33 	bl	80004e0 <newNode>
 800067a:	4603      	mov	r3, r0
 800067c:	6063      	str	r3, [r4, #4]
	root->right->left->right->right = newNode(89);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	689c      	ldr	r4, [r3, #8]
 8000686:	2059      	movs	r0, #89	; 0x59
 8000688:	f7ff ff2a 	bl	80004e0 <newNode>
 800068c:	4603      	mov	r3, r0
 800068e:	60a3      	str	r3, [r4, #8]
	root->right->left->right->left = newNode(67);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	689c      	ldr	r4, [r3, #8]
 8000698:	2043      	movs	r0, #67	; 0x43
 800069a:	f7ff ff21 	bl	80004e0 <newNode>
 800069e:	4603      	mov	r3, r0
 80006a0:	6063      	str	r3, [r4, #4]
	root->right->left->left->right = newNode(88);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	685c      	ldr	r4, [r3, #4]
 80006aa:	2058      	movs	r0, #88	; 0x58
 80006ac:	f7ff ff18 	bl	80004e0 <newNode>
 80006b0:	4603      	mov	r3, r0
 80006b2:	60a3      	str	r3, [r4, #8]
	root->right->left->left->left = newNode(66);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	685c      	ldr	r4, [r3, #4]
 80006bc:	2042      	movs	r0, #66	; 0x42
 80006be:	f7ff ff0f 	bl	80004e0 <newNode>
 80006c2:	4603      	mov	r3, r0
 80006c4:	6063      	str	r3, [r4, #4]

	return root;
 80006c6:	687b      	ldr	r3, [r7, #4]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <deleteMorseTree>:
void deleteMorseTree(struct node* n){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if(!(n->left) && !(n->right)){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d107      	bne.n	80006f0 <deleteMorseTree+0x20>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d103      	bne.n	80006f0 <deleteMorseTree+0x20>
		free(n);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f001 f9d3 	bl	8001a94 <free>
		return;
 80006ee:	e00a      	b.n	8000706 <deleteMorseTree+0x36>
	}
	deleteMorseTree(n->left);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffeb 	bl	80006d0 <deleteMorseTree>
	deleteMorseTree(n->right);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffe6 	bl	80006d0 <deleteMorseTree>
	return;
 8000704:	bf00      	nop
}
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <flash>:
void flash(char duration){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8000716:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800071a:	4810      	ldr	r0, [pc, #64]	; (800075c <flash+0x50>)
 800071c:	f000 fd61 	bl	80011e2 <HAL_GPIO_TogglePin>
	if(duration == 1){
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d108      	bne.n	8000738 <flash+0x2c>
		HAL_Delay(dotDuration*3);
 8000726:	2332      	movs	r3, #50	; 0x32
 8000728:	461a      	mov	r2, r3
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f000 faaf 	bl	8000c94 <HAL_Delay>
 8000736:	e003      	b.n	8000740 <flash+0x34>
	}else{
		HAL_Delay(dotDuration);
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	4618      	mov	r0, r3
 800073c:	f000 faaa 	bl	8000c94 <HAL_Delay>
	}

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8000740:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <flash+0x50>)
 8000746:	f000 fd4c 	bl	80011e2 <HAL_GPIO_TogglePin>
	HAL_Delay(dotDuration);
 800074a:	2332      	movs	r3, #50	; 0x32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 faa1 	bl	8000c94 <HAL_Delay>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020c00 	.word	0x40020c00

08000760 <decode>:
char decode(char* c, struct node* n){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	if(n->data == *c){ return 1; }
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d101      	bne.n	800077a <decode+0x1a>
 8000776:	2301      	movs	r3, #1
 8000778:	e032      	b.n	80007e0 <decode+0x80>
	if(!(n->left) && !(n->right)){ return 0; }
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d105      	bne.n	800078e <decode+0x2e>
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <decode+0x2e>
 800078a:	2300      	movs	r3, #0
 800078c:	e028      	b.n	80007e0 <decode+0x80>
	if(n->right){
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00f      	beq.n	80007b6 <decode+0x56>
		char r = decode(c, n->right);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	4619      	mov	r1, r3
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ffdf 	bl	8000760 <decode>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73fb      	strb	r3, [r7, #15]
		if(r == 1){
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d104      	bne.n	80007b6 <decode+0x56>
			flash(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff ffad 	bl	800070c <flash>
			return 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e014      	b.n	80007e0 <decode+0x80>
		}
	}
	if(n->left){
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00f      	beq.n	80007de <decode+0x7e>
		char l = decode(c, n->left);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4619      	mov	r1, r3
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ffcb 	bl	8000760 <decode>
 80007ca:	4603      	mov	r3, r0
 80007cc:	73bb      	strb	r3, [r7, #14]
		if(l == 1){
 80007ce:	7bbb      	ldrb	r3, [r7, #14]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d104      	bne.n	80007de <decode+0x7e>
			flash(0);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff99 	bl	800070c <flash>
			return 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <decode+0x80>
		}
	}
	return 0;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <morse>:
void morse(char* msg, struct node* root){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	for(size_t i = 0; i < len; i++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	e02d      	b.n	8000854 <morse+0x6c>
		char current = *(msg+i);
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	72bb      	strb	r3, [r7, #10]
		if(*(msg+i) > 91){
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b5b      	cmp	r3, #91	; 0x5b
 800080c:	d903      	bls.n	8000816 <morse+0x2e>
				current -= 32;
 800080e:	7abb      	ldrb	r3, [r7, #10]
 8000810:	3b20      	subs	r3, #32
 8000812:	b2db      	uxtb	r3, r3
 8000814:	72bb      	strb	r3, [r7, #10]
		}
		char space = decode(&current, root);
 8000816:	f107 030a 	add.w	r3, r7, #10
 800081a:	6839      	ldr	r1, [r7, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff9f 	bl	8000760 <decode>
 8000822:	4603      	mov	r3, r0
 8000824:	72fb      	strb	r3, [r7, #11]
		if(space == 0){
 8000826:	7afb      	ldrb	r3, [r7, #11]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d108      	bne.n	800083e <morse+0x56>
			HAL_Delay(dotDuration*7);
 800082c:	2332      	movs	r3, #50	; 0x32
 800082e:	461a      	mov	r2, r3
 8000830:	4613      	mov	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	1a9b      	subs	r3, r3, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fa2c 	bl	8000c94 <HAL_Delay>
 800083c:	e007      	b.n	800084e <morse+0x66>
		}else{
			HAL_Delay(dotDuration*3);
 800083e:	2332      	movs	r3, #50	; 0x32
 8000840:	461a      	mov	r2, r3
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fa23 	bl	8000c94 <HAL_Delay>
	for(size_t i = 0; i < len; i++){
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <morse+0x80>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	429a      	cmp	r2, r3
 800085c:	d3cc      	bcc.n	80007f8 <morse+0x10>
		}
	}
}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000094 	.word	0x20000094

0800086c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

	HAL_Init();
 8000872:	f000 f99d 	bl	8000bb0 <HAL_Init>
	SystemClock_Config();
 8000876:	f000 f835 	bl	80008e4 <SystemClock_Config>
	MX_GPIO_Init();
 800087a:	f000 f891 	bl	80009a0 <MX_GPIO_Init>
	struct node* root = createMorseTree();
 800087e:	f7ff fe47 	bl	8000510 <createMorseTree>
 8000882:	6078      	str	r0, [r7, #4]
	len = strlen(msg);
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <main+0x6c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fca5 	bl	80001d8 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <main+0x70>)
 8000892:	6013      	str	r3, [r2, #0]

	while(count < 8){
 8000894:	e013      	b.n	80008be <main+0x52>
		morse(msg, root);
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <main+0x6c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffa3 	bl	80007e8 <morse>
		HAL_Delay(dotDuration*7);
 80008a2:	2332      	movs	r3, #50	; 0x32
 80008a4:	461a      	mov	r2, r3
 80008a6:	4613      	mov	r3, r2
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f9f1 	bl	8000c94 <HAL_Delay>
		count++;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <main+0x74>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <main+0x74>)
 80008bc:	701a      	strb	r2, [r3, #0]
	while(count < 8){
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <main+0x74>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	d9e7      	bls.n	8000896 <main+0x2a>
	}

	deleteMorseTree(root);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff02 	bl	80006d0 <deleteMorseTree>

	return 0;
 80008cc:	2300      	movs	r3, #0

}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000094 	.word	0x20000094
 80008e0:	20000090 	.word	0x20000090

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2230      	movs	r2, #48	; 0x30
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f8d6 	bl	8001aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <SystemClock_Config+0xb4>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <SystemClock_Config+0xb4>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemClock_Config+0xb4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <SystemClock_Config+0xb8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <SystemClock_Config+0xb8>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <SystemClock_Config+0xb8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800094c:	2300      	movs	r3, #0
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fc5f 	bl	8001218 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000960:	f000 f852 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f000 feba 	bl	80016f8 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800098a:	f000 f83d 	bl	8000a08 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_GPIO_Init+0x60>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MX_GPIO_Init+0x60>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6313      	str	r3, [r2, #48]	; 0x30
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_GPIO_Init+0x60>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009d6:	480b      	ldr	r0, [pc, #44]	; (8000a04 <MX_GPIO_Init+0x64>)
 80009d8:	f000 fbea 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_GPIO_Init+0x64>)
 80009f4:	f000 fa58 	bl	8000ea8 <HAL_GPIO_Init>

}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f8ca 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d207      	bcs.n	8000b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af4:	f000 ff9c 	bl	8001a30 <__errno>
 8000af8:	4603      	mov	r3, r0
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b02:	e009      	b.n	8000b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <_sbrk+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20020000 	.word	0x20020000
 8000b24:	00000400 	.word	0x00000400
 8000b28:	20000098 	.word	0x20000098
 8000b2c:	200000b8 	.word	0x200000b8

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <SystemInit+0x28>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <SystemInit+0x28>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SystemInit+0x28>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b62:	e003      	b.n	8000b6c <LoopCopyDataInit>

08000b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b6a:	3104      	adds	r1, #4

08000b6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b74:	d3f6      	bcc.n	8000b64 <CopyDataInit>
  ldr  r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b78:	e002      	b.n	8000b80 <LoopFillZerobss>

08000b7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b7c:	f842 3b04 	str.w	r3, [r2], #4

08000b80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b84:	d3f9      	bcc.n	8000b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ffd3 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f000 ff57 	bl	8001a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fe6d 	bl	800086c <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b98:	08001c90 	.word	0x08001c90
  ldr  r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ba0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000ba4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000ba8:	200000b8 	.word	0x200000b8

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_Init+0x40>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_Init+0x40>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_Init+0x40>)
 8000bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f931 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f808 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff ff18 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x54>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x58>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f93b 	bl	8000e8e <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 f911 	bl	8000e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x5c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	2000000c 	.word	0x2000000c
 8000c50:	20000008 	.word	0x20000008

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000000c 	.word	0x2000000c
 8000c78:	200000a4 	.word	0x200000a4

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200000a4 	.word	0x200000a4

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffde 	bl	8000c7c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000000c 	.word	0x2000000c

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e20:	f7ff ff8e 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff47 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e68:	f7ff ff5c 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff ff8e 	bl	8000d94 <NVIC_EncodePriority>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff5d 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffb0 	bl	8000dfc <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	e159      	b.n	8001178 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	f040 8148 	bne.w	8001172 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d00b      	beq.n	8000f02 <HAL_GPIO_Init+0x5a>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef6:	2b11      	cmp	r3, #17
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b12      	cmp	r3, #18
 8000f00:	d130      	bne.n	8000f64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	091b      	lsrs	r3, r3, #4
 8000f4e:	f003 0201 	and.w	r2, r3, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0xfc>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b12      	cmp	r3, #18
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	69b9      	ldr	r1, [r7, #24]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80a2 	beq.w	8001172 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b57      	ldr	r3, [pc, #348]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a56      	ldr	r2, [pc, #344]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104a:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a49      	ldr	r2, [pc, #292]	; (8001198 <HAL_GPIO_Init+0x2f0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x202>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a48      	ldr	r2, [pc, #288]	; (800119c <HAL_GPIO_Init+0x2f4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x1fe>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <HAL_GPIO_Init+0x2f8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x1fa>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <HAL_GPIO_Init+0x2fc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x1f6>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <HAL_GPIO_Init+0x300>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x1f2>
 8001096:	2304      	movs	r3, #4
 8001098:	e008      	b.n	80010ac <HAL_GPIO_Init+0x204>
 800109a:	2307      	movs	r3, #7
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x204>
 800109e:	2303      	movs	r3, #3
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010aa:	2300      	movs	r3, #0
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	f002 0203 	and.w	r2, r2, #3
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	4093      	lsls	r3, r2
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010bc:	4935      	ldr	r1, [pc, #212]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ee:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001118:	4a24      	ldr	r2, [pc, #144]	; (80011ac <HAL_GPIO_Init+0x304>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_GPIO_Init+0x304>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <HAL_GPIO_Init+0x304>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x304>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_GPIO_Init+0x304>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3301      	adds	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	2b0f      	cmp	r3, #15
 800117c:	f67f aea2 	bls.w	8000ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40013800 	.word	0x40013800
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	401a      	ands	r2, r3
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d104      	bne.n	8001206 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	041a      	lsls	r2, r3, #16
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001204:	e002      	b.n	800120c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e25b      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d075      	beq.n	8001322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	4ba3      	ldr	r3, [pc, #652]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b04      	cmp	r3, #4
 8001240:	d00c      	beq.n	800125c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001242:	4ba0      	ldr	r3, [pc, #640]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124a:	2b08      	cmp	r3, #8
 800124c:	d112      	bne.n	8001274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124e:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800125a:	d10b      	bne.n	8001274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	4b99      	ldr	r3, [pc, #612]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d05b      	beq.n	8001320 <HAL_RCC_OscConfig+0x108>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d157      	bne.n	8001320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e236      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x74>
 800127e:	4b91      	ldr	r3, [pc, #580]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a90      	ldr	r2, [pc, #576]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e01d      	b.n	80012c8 <HAL_RCC_OscConfig+0xb0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x98>
 8001296:	4b8b      	ldr	r3, [pc, #556]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a8a      	ldr	r2, [pc, #552]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a87      	ldr	r2, [pc, #540]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0xb0>
 80012b0:	4b84      	ldr	r3, [pc, #528]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a83      	ldr	r2, [pc, #524]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a80      	ldr	r2, [pc, #512]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d013      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcd4 	bl	8000c7c <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fcd0 	bl	8000c7c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1fb      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	4b76      	ldr	r3, [pc, #472]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0xc0>
 80012f6:	e014      	b.n	8001322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fcc0 	bl	8000c7c <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fcbc 	bl	8000c7c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1e7      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	4b6c      	ldr	r3, [pc, #432]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0xe8>
 800131e:	e000      	b.n	8001322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d063      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	4b65      	ldr	r3, [pc, #404]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133a:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	2b08      	cmp	r3, #8
 8001344:	d11c      	bne.n	8001380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d116      	bne.n	8001380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x152>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e1bb      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4952      	ldr	r1, [pc, #328]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	e03a      	b.n	80013f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001388:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <HAL_RCC_OscConfig+0x2b0>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fc75 	bl	8000c7c <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fc71 	bl	8000c7c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e19c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4940      	ldr	r1, [pc, #256]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
 80013c8:	e015      	b.n	80013f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x2b0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc54 	bl	8000c7c <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc50 	bl	8000c7c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e17b      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d030      	beq.n	8001464 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d016      	beq.n	8001438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <HAL_RCC_OscConfig+0x2b4>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff fc34 	bl	8000c7c <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fc30 	bl	8000c7c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e15b      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x200>
 8001436:	e015      	b.n	8001464 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_OscConfig+0x2b4>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fc1d 	bl	8000c7c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fc19 	bl	8000c7c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e144      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80a0 	beq.w	80015b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d121      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fbdf 	bl	8000c7c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e011      	b.n	80014e6 <HAL_RCC_OscConfig+0x2ce>
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	42470000 	.word	0x42470000
 80014cc:	42470e80 	.word	0x42470e80
 80014d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d4:	f7ff fbd2 	bl	8000c7c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0fd      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b81      	ldr	r3, [pc, #516]	; (80016ec <HAL_RCC_OscConfig+0x4d4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x2f0>
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a7c      	ldr	r2, [pc, #496]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
 8001506:	e01c      	b.n	8001542 <HAL_RCC_OscConfig+0x32a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x312>
 8001510:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a76      	ldr	r2, [pc, #472]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	4b74      	ldr	r3, [pc, #464]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a73      	ldr	r2, [pc, #460]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6713      	str	r3, [r2, #112]	; 0x70
 8001528:	e00b      	b.n	8001542 <HAL_RCC_OscConfig+0x32a>
 800152a:	4b71      	ldr	r3, [pc, #452]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a70      	ldr	r2, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a6d      	ldr	r2, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d015      	beq.n	8001576 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154a:	f7ff fb97 	bl	8000c7c <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff fb93 	bl	8000c7c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e0bc      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0ee      	beq.n	8001552 <HAL_RCC_OscConfig+0x33a>
 8001574:	e014      	b.n	80015a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fb81 	bl	8000c7c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fb7d 	bl	8000c7c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0a6      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ee      	bne.n	800157e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d105      	bne.n	80015b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a6:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8092 	beq.w	80016e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015bc:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d05c      	beq.n	8001682 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d141      	bne.n	8001654 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_RCC_OscConfig+0x4dc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb51 	bl	8000c7c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff fb4d 	bl	8000c7c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e078      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f0:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69da      	ldr	r2, [r3, #28]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	019b      	lsls	r3, r3, #6
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	041b      	lsls	r3, r3, #16
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	061b      	lsls	r3, r3, #24
 8001620:	4933      	ldr	r1, [pc, #204]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <HAL_RCC_OscConfig+0x4dc>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb26 	bl	8000c7c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb22 	bl	8000c7c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e04d      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x41c>
 8001652:	e045      	b.n	80016e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x4dc>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb0f 	bl	8000c7c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb0b 	bl	8000c7c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e036      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x44a>
 8001680:	e02e      	b.n	80016e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e029      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_RCC_OscConfig+0x4d8>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d11c      	bne.n	80016dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d115      	bne.n	80016dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016bc:	4293      	cmp	r3, r2
 80016be:	d10d      	bne.n	80016dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d106      	bne.n	80016dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40007000 	.word	0x40007000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	42470060 	.word	0x42470060

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0cc      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90c      	bls.n	8001734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d044      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d119      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e067      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4934      	ldr	r1, [pc, #208]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff fa48 	bl	8000c7c <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff fa44 	bl	8000c7c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e04f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f9a8 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023c00 	.word	0x40023c00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	08001c70 	.word	0x08001c70
 80018bc:	20000004 	.word	0x20000004
 80018c0:	20000008 	.word	0x20000008

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018ca:	2100      	movs	r1, #0
 80018cc:	6079      	str	r1, [r7, #4]
 80018ce:	2100      	movs	r1, #0
 80018d0:	60f9      	str	r1, [r7, #12]
 80018d2:	2100      	movs	r1, #0
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018d6:	2100      	movs	r1, #0
 80018d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018da:	4952      	ldr	r1, [pc, #328]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x160>)
 80018dc:	6889      	ldr	r1, [r1, #8]
 80018de:	f001 010c 	and.w	r1, r1, #12
 80018e2:	2908      	cmp	r1, #8
 80018e4:	d00d      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x3e>
 80018e6:	2908      	cmp	r1, #8
 80018e8:	f200 8094 	bhi.w	8001a14 <HAL_RCC_GetSysClockFreq+0x150>
 80018ec:	2900      	cmp	r1, #0
 80018ee:	d002      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x32>
 80018f0:	2904      	cmp	r1, #4
 80018f2:	d003      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x38>
 80018f4:	e08e      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x164>)
 80018f8:	60bb      	str	r3, [r7, #8]
       break;
 80018fa:	e08e      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fc:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x168>)
 80018fe:	60bb      	str	r3, [r7, #8]
      break;
 8001900:	e08b      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001902:	4948      	ldr	r1, [pc, #288]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001904:	6849      	ldr	r1, [r1, #4]
 8001906:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800190a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190c:	4945      	ldr	r1, [pc, #276]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x160>)
 800190e:	6849      	ldr	r1, [r1, #4]
 8001910:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001914:	2900      	cmp	r1, #0
 8001916:	d024      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001918:	4942      	ldr	r1, [pc, #264]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x160>)
 800191a:	6849      	ldr	r1, [r1, #4]
 800191c:	0989      	lsrs	r1, r1, #6
 800191e:	4608      	mov	r0, r1
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001928:	f04f 0500 	mov.w	r5, #0
 800192c:	ea00 0204 	and.w	r2, r0, r4
 8001930:	ea01 0305 	and.w	r3, r1, r5
 8001934:	493d      	ldr	r1, [pc, #244]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x168>)
 8001936:	fb01 f003 	mul.w	r0, r1, r3
 800193a:	2100      	movs	r1, #0
 800193c:	fb01 f102 	mul.w	r1, r1, r2
 8001940:	1844      	adds	r4, r0, r1
 8001942:	493a      	ldr	r1, [pc, #232]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x168>)
 8001944:	fba2 0101 	umull	r0, r1, r2, r1
 8001948:	1863      	adds	r3, r4, r1
 800194a:	4619      	mov	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	461a      	mov	r2, r3
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	f7fe fc48 	bl	80001e8 <__aeabi_uldivmod>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4613      	mov	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e04a      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	461a      	mov	r2, r3
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	ea02 0400 	and.w	r4, r2, r0
 800197a:	ea03 0501 	and.w	r5, r3, r1
 800197e:	4620      	mov	r0, r4
 8001980:	4629      	mov	r1, r5
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	014b      	lsls	r3, r1, #5
 800198c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001990:	0142      	lsls	r2, r0, #5
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	1b00      	subs	r0, r0, r4
 8001998:	eb61 0105 	sbc.w	r1, r1, r5
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	018b      	lsls	r3, r1, #6
 80019a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019aa:	0182      	lsls	r2, r0, #6
 80019ac:	1a12      	subs	r2, r2, r0
 80019ae:	eb63 0301 	sbc.w	r3, r3, r1
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	00d9      	lsls	r1, r3, #3
 80019bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019c0:	00d0      	lsls	r0, r2, #3
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	1912      	adds	r2, r2, r4
 80019c8:	eb45 0303 	adc.w	r3, r5, r3
 80019cc:	f04f 0000 	mov.w	r0, #0
 80019d0:	f04f 0100 	mov.w	r1, #0
 80019d4:	0299      	lsls	r1, r3, #10
 80019d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019da:	0290      	lsls	r0, r2, #10
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	461a      	mov	r2, r3
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	f7fe fbfc 	bl	80001e8 <__aeabi_uldivmod>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4613      	mov	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x160>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	60bb      	str	r3, [r7, #8]
      break;
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a16:	60bb      	str	r3, [r7, #8]
      break;
 8001a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	00f42400 	.word	0x00f42400
 8001a2c:	017d7840 	.word	0x017d7840

08001a30 <__errno>:
 8001a30:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <__errno+0x8>)
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000010 	.word	0x20000010

08001a3c <__libc_init_array>:
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	4d0d      	ldr	r5, [pc, #52]	; (8001a74 <__libc_init_array+0x38>)
 8001a40:	4c0d      	ldr	r4, [pc, #52]	; (8001a78 <__libc_init_array+0x3c>)
 8001a42:	1b64      	subs	r4, r4, r5
 8001a44:	10a4      	asrs	r4, r4, #2
 8001a46:	2600      	movs	r6, #0
 8001a48:	42a6      	cmp	r6, r4
 8001a4a:	d109      	bne.n	8001a60 <__libc_init_array+0x24>
 8001a4c:	4d0b      	ldr	r5, [pc, #44]	; (8001a7c <__libc_init_array+0x40>)
 8001a4e:	4c0c      	ldr	r4, [pc, #48]	; (8001a80 <__libc_init_array+0x44>)
 8001a50:	f000 f8f8 	bl	8001c44 <_init>
 8001a54:	1b64      	subs	r4, r4, r5
 8001a56:	10a4      	asrs	r4, r4, #2
 8001a58:	2600      	movs	r6, #0
 8001a5a:	42a6      	cmp	r6, r4
 8001a5c:	d105      	bne.n	8001a6a <__libc_init_array+0x2e>
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
 8001a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a64:	4798      	blx	r3
 8001a66:	3601      	adds	r6, #1
 8001a68:	e7ee      	b.n	8001a48 <__libc_init_array+0xc>
 8001a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a6e:	4798      	blx	r3
 8001a70:	3601      	adds	r6, #1
 8001a72:	e7f2      	b.n	8001a5a <__libc_init_array+0x1e>
 8001a74:	08001c88 	.word	0x08001c88
 8001a78:	08001c88 	.word	0x08001c88
 8001a7c:	08001c88 	.word	0x08001c88
 8001a80:	08001c8c 	.word	0x08001c8c

08001a84 <malloc>:
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <malloc+0xc>)
 8001a86:	4601      	mov	r1, r0
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	f000 b863 	b.w	8001b54 <_malloc_r>
 8001a8e:	bf00      	nop
 8001a90:	20000010 	.word	0x20000010

08001a94 <free>:
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <free+0xc>)
 8001a96:	4601      	mov	r1, r0
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	f000 b80b 	b.w	8001ab4 <_free_r>
 8001a9e:	bf00      	nop
 8001aa0:	20000010 	.word	0x20000010

08001aa4 <memset>:
 8001aa4:	4402      	add	r2, r0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d100      	bne.n	8001aae <memset+0xa>
 8001aac:	4770      	bx	lr
 8001aae:	f803 1b01 	strb.w	r1, [r3], #1
 8001ab2:	e7f9      	b.n	8001aa8 <memset+0x4>

08001ab4 <_free_r>:
 8001ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ab6:	2900      	cmp	r1, #0
 8001ab8:	d048      	beq.n	8001b4c <_free_r+0x98>
 8001aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001abe:	9001      	str	r0, [sp, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8001ac6:	bfb8      	it	lt
 8001ac8:	18e4      	addlt	r4, r4, r3
 8001aca:	f000 f8ad 	bl	8001c28 <__malloc_lock>
 8001ace:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <_free_r+0x9c>)
 8001ad0:	9801      	ldr	r0, [sp, #4]
 8001ad2:	6813      	ldr	r3, [r2, #0]
 8001ad4:	4615      	mov	r5, r2
 8001ad6:	b933      	cbnz	r3, 8001ae6 <_free_r+0x32>
 8001ad8:	6063      	str	r3, [r4, #4]
 8001ada:	6014      	str	r4, [r2, #0]
 8001adc:	b003      	add	sp, #12
 8001ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ae2:	f000 b8a7 	b.w	8001c34 <__malloc_unlock>
 8001ae6:	42a3      	cmp	r3, r4
 8001ae8:	d90b      	bls.n	8001b02 <_free_r+0x4e>
 8001aea:	6821      	ldr	r1, [r4, #0]
 8001aec:	1862      	adds	r2, r4, r1
 8001aee:	4293      	cmp	r3, r2
 8001af0:	bf04      	itt	eq
 8001af2:	681a      	ldreq	r2, [r3, #0]
 8001af4:	685b      	ldreq	r3, [r3, #4]
 8001af6:	6063      	str	r3, [r4, #4]
 8001af8:	bf04      	itt	eq
 8001afa:	1852      	addeq	r2, r2, r1
 8001afc:	6022      	streq	r2, [r4, #0]
 8001afe:	602c      	str	r4, [r5, #0]
 8001b00:	e7ec      	b.n	8001adc <_free_r+0x28>
 8001b02:	461a      	mov	r2, r3
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	b10b      	cbz	r3, 8001b0c <_free_r+0x58>
 8001b08:	42a3      	cmp	r3, r4
 8001b0a:	d9fa      	bls.n	8001b02 <_free_r+0x4e>
 8001b0c:	6811      	ldr	r1, [r2, #0]
 8001b0e:	1855      	adds	r5, r2, r1
 8001b10:	42a5      	cmp	r5, r4
 8001b12:	d10b      	bne.n	8001b2c <_free_r+0x78>
 8001b14:	6824      	ldr	r4, [r4, #0]
 8001b16:	4421      	add	r1, r4
 8001b18:	1854      	adds	r4, r2, r1
 8001b1a:	42a3      	cmp	r3, r4
 8001b1c:	6011      	str	r1, [r2, #0]
 8001b1e:	d1dd      	bne.n	8001adc <_free_r+0x28>
 8001b20:	681c      	ldr	r4, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	6053      	str	r3, [r2, #4]
 8001b26:	4421      	add	r1, r4
 8001b28:	6011      	str	r1, [r2, #0]
 8001b2a:	e7d7      	b.n	8001adc <_free_r+0x28>
 8001b2c:	d902      	bls.n	8001b34 <_free_r+0x80>
 8001b2e:	230c      	movs	r3, #12
 8001b30:	6003      	str	r3, [r0, #0]
 8001b32:	e7d3      	b.n	8001adc <_free_r+0x28>
 8001b34:	6825      	ldr	r5, [r4, #0]
 8001b36:	1961      	adds	r1, r4, r5
 8001b38:	428b      	cmp	r3, r1
 8001b3a:	bf04      	itt	eq
 8001b3c:	6819      	ldreq	r1, [r3, #0]
 8001b3e:	685b      	ldreq	r3, [r3, #4]
 8001b40:	6063      	str	r3, [r4, #4]
 8001b42:	bf04      	itt	eq
 8001b44:	1949      	addeq	r1, r1, r5
 8001b46:	6021      	streq	r1, [r4, #0]
 8001b48:	6054      	str	r4, [r2, #4]
 8001b4a:	e7c7      	b.n	8001adc <_free_r+0x28>
 8001b4c:	b003      	add	sp, #12
 8001b4e:	bd30      	pop	{r4, r5, pc}
 8001b50:	2000009c 	.word	0x2000009c

08001b54 <_malloc_r>:
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b56:	1ccd      	adds	r5, r1, #3
 8001b58:	f025 0503 	bic.w	r5, r5, #3
 8001b5c:	3508      	adds	r5, #8
 8001b5e:	2d0c      	cmp	r5, #12
 8001b60:	bf38      	it	cc
 8001b62:	250c      	movcc	r5, #12
 8001b64:	2d00      	cmp	r5, #0
 8001b66:	4606      	mov	r6, r0
 8001b68:	db01      	blt.n	8001b6e <_malloc_r+0x1a>
 8001b6a:	42a9      	cmp	r1, r5
 8001b6c:	d903      	bls.n	8001b76 <_malloc_r+0x22>
 8001b6e:	230c      	movs	r3, #12
 8001b70:	6033      	str	r3, [r6, #0]
 8001b72:	2000      	movs	r0, #0
 8001b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b76:	f000 f857 	bl	8001c28 <__malloc_lock>
 8001b7a:	4921      	ldr	r1, [pc, #132]	; (8001c00 <_malloc_r+0xac>)
 8001b7c:	680a      	ldr	r2, [r1, #0]
 8001b7e:	4614      	mov	r4, r2
 8001b80:	b99c      	cbnz	r4, 8001baa <_malloc_r+0x56>
 8001b82:	4f20      	ldr	r7, [pc, #128]	; (8001c04 <_malloc_r+0xb0>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b923      	cbnz	r3, 8001b92 <_malloc_r+0x3e>
 8001b88:	4621      	mov	r1, r4
 8001b8a:	4630      	mov	r0, r6
 8001b8c:	f000 f83c 	bl	8001c08 <_sbrk_r>
 8001b90:	6038      	str	r0, [r7, #0]
 8001b92:	4629      	mov	r1, r5
 8001b94:	4630      	mov	r0, r6
 8001b96:	f000 f837 	bl	8001c08 <_sbrk_r>
 8001b9a:	1c43      	adds	r3, r0, #1
 8001b9c:	d123      	bne.n	8001be6 <_malloc_r+0x92>
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	6033      	str	r3, [r6, #0]
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	f000 f846 	bl	8001c34 <__malloc_unlock>
 8001ba8:	e7e3      	b.n	8001b72 <_malloc_r+0x1e>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	1b5b      	subs	r3, r3, r5
 8001bae:	d417      	bmi.n	8001be0 <_malloc_r+0x8c>
 8001bb0:	2b0b      	cmp	r3, #11
 8001bb2:	d903      	bls.n	8001bbc <_malloc_r+0x68>
 8001bb4:	6023      	str	r3, [r4, #0]
 8001bb6:	441c      	add	r4, r3
 8001bb8:	6025      	str	r5, [r4, #0]
 8001bba:	e004      	b.n	8001bc6 <_malloc_r+0x72>
 8001bbc:	6863      	ldr	r3, [r4, #4]
 8001bbe:	42a2      	cmp	r2, r4
 8001bc0:	bf0c      	ite	eq
 8001bc2:	600b      	streq	r3, [r1, #0]
 8001bc4:	6053      	strne	r3, [r2, #4]
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f000 f834 	bl	8001c34 <__malloc_unlock>
 8001bcc:	f104 000b 	add.w	r0, r4, #11
 8001bd0:	1d23      	adds	r3, r4, #4
 8001bd2:	f020 0007 	bic.w	r0, r0, #7
 8001bd6:	1ac2      	subs	r2, r0, r3
 8001bd8:	d0cc      	beq.n	8001b74 <_malloc_r+0x20>
 8001bda:	1a1b      	subs	r3, r3, r0
 8001bdc:	50a3      	str	r3, [r4, r2]
 8001bde:	e7c9      	b.n	8001b74 <_malloc_r+0x20>
 8001be0:	4622      	mov	r2, r4
 8001be2:	6864      	ldr	r4, [r4, #4]
 8001be4:	e7cc      	b.n	8001b80 <_malloc_r+0x2c>
 8001be6:	1cc4      	adds	r4, r0, #3
 8001be8:	f024 0403 	bic.w	r4, r4, #3
 8001bec:	42a0      	cmp	r0, r4
 8001bee:	d0e3      	beq.n	8001bb8 <_malloc_r+0x64>
 8001bf0:	1a21      	subs	r1, r4, r0
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	f000 f808 	bl	8001c08 <_sbrk_r>
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	d1dd      	bne.n	8001bb8 <_malloc_r+0x64>
 8001bfc:	e7cf      	b.n	8001b9e <_malloc_r+0x4a>
 8001bfe:	bf00      	nop
 8001c00:	2000009c 	.word	0x2000009c
 8001c04:	200000a0 	.word	0x200000a0

08001c08 <_sbrk_r>:
 8001c08:	b538      	push	{r3, r4, r5, lr}
 8001c0a:	4d06      	ldr	r5, [pc, #24]	; (8001c24 <_sbrk_r+0x1c>)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	4604      	mov	r4, r0
 8001c10:	4608      	mov	r0, r1
 8001c12:	602b      	str	r3, [r5, #0]
 8001c14:	f7fe ff56 	bl	8000ac4 <_sbrk>
 8001c18:	1c43      	adds	r3, r0, #1
 8001c1a:	d102      	bne.n	8001c22 <_sbrk_r+0x1a>
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	b103      	cbz	r3, 8001c22 <_sbrk_r+0x1a>
 8001c20:	6023      	str	r3, [r4, #0]
 8001c22:	bd38      	pop	{r3, r4, r5, pc}
 8001c24:	200000a8 	.word	0x200000a8

08001c28 <__malloc_lock>:
 8001c28:	4801      	ldr	r0, [pc, #4]	; (8001c30 <__malloc_lock+0x8>)
 8001c2a:	f000 b809 	b.w	8001c40 <__retarget_lock_acquire_recursive>
 8001c2e:	bf00      	nop
 8001c30:	200000b0 	.word	0x200000b0

08001c34 <__malloc_unlock>:
 8001c34:	4801      	ldr	r0, [pc, #4]	; (8001c3c <__malloc_unlock+0x8>)
 8001c36:	f000 b804 	b.w	8001c42 <__retarget_lock_release_recursive>
 8001c3a:	bf00      	nop
 8001c3c:	200000b0 	.word	0x200000b0

08001c40 <__retarget_lock_acquire_recursive>:
 8001c40:	4770      	bx	lr

08001c42 <__retarget_lock_release_recursive>:
 8001c42:	4770      	bx	lr

08001c44 <_init>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	bf00      	nop
 8001c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c4a:	bc08      	pop	{r3}
 8001c4c:	469e      	mov	lr, r3
 8001c4e:	4770      	bx	lr

08001c50 <_fini>:
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	bf00      	nop
 8001c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c56:	bc08      	pop	{r3}
 8001c58:	469e      	mov	lr, r3
 8001c5a:	4770      	bx	lr
